# java-1  环境设定到for基础用法
  jdk=jre（java runtime environment）+java的开发工具java，javac（高级程序员范围开发者）
运行.class 软件需要jre=jvm+java se的核心类库 
运行 win+r输入cmd 出错误？
应在jdk目录上输入cmd
//环境变量path配置及其作用
1.环境变量的作用是为了在dos的任意目录，可以去使用java和javac命令
2.先配置JAVA_HOME = 指向jdk安装的主目录
3.编辑path环境变量，增加&JAVA_HOME&




调整完path和%JAVA_HOME%\bin再试一试
路径：此电脑属性-高级系统设置-环境变量
//这是java的快速入门，演示java的开发步骤
//对代码说明
//1.public 类class Hello 表示2，hello{}是一个类开始和结束 
//主方法入口public static void main(String[] args) {System.out.println("hello,world~")
/;表示语句结束	
public class Hello {

	//编写一个main方法
	public static void main(String[] args) {
	System.out.println("hello,world~")；	
		
	}
按 javac hello.class
java.hello

.java文件是源文件
.class文件是字节码文件



java常用的转义字符
1)\t :一个制表位，实现对齐的功能
2)\n：换行符
3)\\： 一个\  &\\\\: 输出两个\\
4)\":一个“
5）\':一个‘
6）\r:一个回车 System.out.println("韩顺符教育\r北京")



必须用注释
单行注释：//注释文字
多行注释：/*注释文字*/
文档注释：
生成一套以网页文件形式体现的该程序的说明文档，一般写在类:/**
 * @author 韩孙平
 * @version 1.0
 */                                  
cmd:javadoc -d 文件夹名-xx -yy Demo3.java
                                 作者 日期
java代码规范
类，方法的注释，要以javadoc这种方式来写
非java Doc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意设么问题等
使用tab和shift+tab 控制左右距离
符号左右空格
每一行不要超过80字符
源文件用tuf-8编码
代码编写有次行风格和行尾风格
Dos：cmd中输入 md创建目录rd删除
需求：a文件到b文件
相对路径：从当前目录a开始定位，到b形成的一个路径  
绝对路径：从顶级目录d，开始定位，形成的路径
dos命令： dir查看当前目录有什么内容
cd：change directory :切换到c盘 cd/D c:
演示：cd d：\abc2\test200 cd\..\abc2\test200
切换到上一级：
案例演示：cd\
案例演示：cd\
cd..\表示到上一级目录
cls 清屏
Dos指令：exit取消 md创建目录 rd删除目录 copy 拷贝文件 del删除文件 echo输入内容到文件 type，move剪切=>linux
变量是程序的基本组成单位
不论是使用那种高级程序语言编写程序，变量都是其程序的基本组成单位，比如：//变量有三个基本要素（类型+名称+值）
class Test{
     public static void main(String []args){        
                 int a=1;//定义了一个变量，类型int整形，名称a，值1
                 int b=3;//定义了一个变量，类型int整形，名称a，值3

                 b=89;//把89值付给了b
                 System.out.println(a)；//输出a变量的值
                 System.out.println(b); //输出b变量的值
//定义变量
int age = 20;
double score = 88.6;
char gender = '男' ;
String name = "jack");
变量使用时：int 4个字节，double 8个字节
变量三要素：变量=变量名+值+数据类型


1.当左右两边都是数值型时，则做加法运算
2.当左右两边有一方为字符串“hello”，则做拼接运算（“100”+2+2）= 10022
java数据类型：

基本数据类型：1.数值型：1）整数类型，存放整数（byte【1】，short【2】，int【4】，long【8】
2）浮点（小数）类型（float【4】，double【8】）
                        
         2.字符型（char【2】）（char【2】）
         3.布尔型（boolean【1】），存放true，false

引用数据类型：1.类（class）
2.接口（interface）
3.数据（【】）
byte n1 = 18 分配一个字节  范围： -128~127
short n2 = 18 分配2个字节 范围：-2的15
次方~ 2的15次方-1
int n3 = 18 分配四个字节 -2的31次方~2的31次方-1
long n4 = 8 分配8个字节 -2的63次方~2的63次方-1
1.java各整数类型有固定的范围和字段长度，不受具体OS【操作系统】的影响，一保证java程序的可移植性
java的整形常量默认为int型，声明long型常量需后加‘I’或‘L’
java程序中变量常声明为int型，除非不足以表示大数，才能使用long
bit：计算机中的最小存储单位。byte：计算机中基本存储单位，1byte = 8bit。
【二进制再详细说，简单举例一个byte 3 和short 3】

java的整型常量（具体值）默认为int型，声明long型常量需后加‘l’或；L；
	    int n1 = 1; //4个字节
long n1 = 1L;//


浮点型： 单精度float 4字节 =-3.4403E38~3.403E38
       双精度double  8字节 = -1.798E308~1.798E308
java的浮点型常量默认为double型，声明float类型常量，需要后面加‘f’或‘F’
浮点型常量有两种表示方式：
十进制数形式： 如：5.12   512.of .512 （必须有小数点）
科学计数法形式；如：5.12e2【】   5.12E-2【】

double num=8.1/3   显示2.69999999999999999  因为计算机运算的时候以精度方式计算值
接近2.7的一个小数
//不能写成 if(num11== num12)system.out.println("相等")错误
应该是以两个数的差值的绝对值，在某个精度范围类判断비슷한 류형에서 판단

注释的快捷键：ctrl + / 注释快捷键，再次输入就取消注释
ctrl+b 复制一行 ctrl + f 删除一行（一般加shift）
//正确的写法
// if(Math.abs（num11 - num12)<0.00001){
     System.out, println("插值非常小，到位的规定精度，认为相等....")
System.out.println(Math.abs(num11-num12))

i//可以通过JavaAPI 来看下一个视频介绍如何使用API
APi:应用程序编程接口 是java提供的基本编程接口（java提供的类的方法）

}
字符类型（char）
char c1 = 'a';
char c2 = '\t';
char c3 = '韩';
char c4 = '7';
1  2  3  5  7   11   13  17  19   23    29  31   37
数字也有阴阳五行

字符类型常用单引号括起来单个字符
java中还允许使用转义字符‘\’来将其后的字符转变为特殊字符型常量 如： char c3 = ‘\n’ ; // 'n'表示换行符
在java中，char的本质是一个整数，在输出时，是unicode码对应的字符
tool.chinaz.com/Tools/Uicode.aspx
可以直接给char赋一个整数，然后输出时，会按照对应的uncode字符输出[97]
char类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码.
字符型存储到计算机中，需要将字符对应的码值找出来列入： a = 97 ==>二进制1100001==>存储
读取：二进制=>97==>'a'=>显示
介绍一下字符编码表{sublime}
ASCll(ASCll编码表 一个字节表示，一个128 个字符）实际上256个字符但是只用128个
Unicode （Unicode 编码表 固定大小的编码 使用两个字节来表示字符，字母和汉子统一都是占用两个字节，这样浪费空间）
utf-8（编码表，大小可变的编码 字母使用1个字节，汉子使用3个字节）
gbk（可以表示汉子，而且范围广，字母使用1个字节，汉子使用2个字节
gb2312（可以表示汉子，gb2312< gbk）
big 5 码（繁体中文，台湾，香港） 
ASCll表： 美国制定的讲述英语与二进制十进制十六进制的关系一共规定128个字符的编码，只占用了一个字节的后面7位，最前面的1位统一规定为0.特别提示：一个字节可以表示256个字符，ASCll码只用了128个字符。
缺点：不能表示所有字符
所有出现了Unicode编码
Unicode编码：好处是将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，使用Unicode没有乱码的问题。
缺点：英文与汉子都占用2个字节，浪费空间如编码0-127的字符是与ASCll的编码一样.如‘a’在ASCll吗是0x61，在unicode码是ox0061，都对应97，因此Unicode码兼容ASCll码。
UTF-8编码
它是对Unicode码的一种改进，他可以使用1-6个字节表示一个符号
使用大小可变的编码 字母占1个字节，汉子占3个字节
布尔类型：boolean
只允许取值true和false，无null
boolean类型占一个字节
类似于逻辑运算，一般用于程序流程控制
if条件控制语句；
while循环控制语句
do-while循环控制语句；
for循环控制语句
JAVA 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。
数据类型按精度（容量）大小排序为（背，规则）
 char=>int=>long=>float=>double
byte=>short=>int=>long=>float=>double

cilfdbsilfd 
int a = 'c';//ok
double d = 80;//ok
低精度可以在高精度运行

自动类型转换注意和细节
1.有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。
2.当我们把精度（容量）大的数据类型赋值给精度（容量）小 的数据类型时，就会报错，反之就会进行自动类型转换。
3.(byte,short)和char之间不会相互自动转换。
4.byte，short，char 他们三者可以计算，在他们参与计算时结果自动转为int
5.boolean 不参与转换
6.自动提升原则：表达式结果的类型自动提升为 操作数中最大的类型

强度类型转换：
自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符（），但可能造成精度降低或溢出，要注意
当数据的大小从大----》小，就需要使用到强制转换
强制符号只针对与最近的操作数有效，往往会使用小括号提升优先级

// int x = (int)(10*3.5+6*1.5);//提示编译错无：从double到int会有损失
      //int y =(int)(10*3.5+6*1.5);需要用小括号括起来
      System.out.println(x);
short s = 12 对  赋给s short和12
s = s-9 错  s-9赋给了s   s-9的结果是int 但s 定义为short int=>short 所以错
byte  b =2
short c =5
short d = b+c错  因为 byte  short  char参与计算时自动转为int  int=》short 所以错


在程序开发中，我们经常需要将基本数据类型转成String类型。 或者将String 类型转成基本数据类型
基本类型转String类型
语法： 将基本类型的值+""即可
演示：StringToBasic.java

String类型转基本数据类型
语法：通过基本类型的包装类调佣parsexx方法即可
//解读使用 基本数据类型对应的包装类， 的相应方法，得到基本数据类型
Integer 把对象改为int 类型
 int n1 = Integer.parseInt(str);
   char c1 = ‘韩’
转成String str = c1 + “”  
double num2 = Double.parseDouble(s5);
      float num3 = Float.parseFloat(s5);
      long num4 = Long.parseLong(s5);
      byte num5 = Byte.parseByte(s5);
      boolean b = Boolean.parseBoolean("true");
      short num6 = Short.parseShort(s5);
)

 //怎么把字符串转成字符char->
      System.out.println(s5.charAt(0));//我要把s5的第一个字符打出来 s = 123  打出1

在讲string 类型转成 基本数据类型时， 要确保String类型能够转成有效的数据， 比如我们可以吧“123”， 转成一个整数， 但是不能把“hello”转成一个整数
如果格式不正确， 就会抛出异常，程序就会终止，这个歌问题在异常处理章节中，会处理

数值在同一类型范围内可以变化


运算符介绍
运算符是一种特殊的符号，用以表示数据的运算，赋值和比较等。
1.算术运算符
2.赋值运算符
3.关系运算符（比较运算符）
4.逻辑运算符
5.位运算符（需要二进制基础）
6.三元运算符




1.算数运算符
+： 正号  “+7=>7”
-：负号  “b=11; -b =>-11”
+ : 加   “9+9=>18”
-:减"10-8=>2    "
 * : 乘"7*8=>56"
/: 除 "9/9=>1"
%: “取模python里头”（取余） “11%9=>2”
a是小数a%b= a-（int）a/b*b
++  自增（前）：先运算后取值 “a=2;b=++a=> a=3;b=3”
++    自增（后） ：先取值后运算“a=2;b=a++=> a=3;b=2”
+  :  字符串相加：   “hsp”+ “edu”=》hspedu
                                     结果
== ：相当于 8==7     false
！=： 不等于 8！=7  true
<:   小于   8<7            false
>:    大于  8>7           true
<= :     小于等于 8<=7  false
>= :      大于等于  8>=7  true
instanceof  检查是否是类的对象  “hsp” instanceof String          true


短路与 &&， 短路或 ||， 取反！
逻辑与 &，逻辑或 |，^ 逻辑异域
                  
                 （and）              (or)            a（得错）
a          b      a&b  a&&b   a||b(or)    a|b     !a
true     true true    true      true    true    false
true     false false  false     true    true    false
false    true false   false     ture    ture    true
false    false fase   false     false    false  true
a^b
false
true
true
false


&&短路与： 如果第一个条件为false， 则第二个条件不会判断，最终结果false  （a = 100 a<78 && a>23）
&逻辑与：不管第一个条件是否为false，第二个条件都要判断，效率低

开发中，我们使用的基本是短路与&&,短路或效率高

||短路或：如果第一个判断是true 则第二个不判断
|逻辑与：不管第一个条件是否为true，第二个条件都要判断，效率低




赋值运算算符

赋值运算符就是将某个运算后的值，赋给制定的变量。
赋值运算符的分类
基本赋值运算符=
复合赋值运算符
+=，-=， *=，/=, %= 等，重点讲解一个+ =，其他的作用是一个道理

a + = b; 等价  a = a +b;    a - = b 等价 a = a-b
assign 分配
int num1 = 10
int num 20; int num2 = 78* 34-10; int num3 = a;

byte b = 3;
b + = 2;// 等价 b=(byte)(b + 2复合赋值运算符)有一个类型转换


三元运算符 Ternary Operator

基本语法

条件表达式 表达式1； 表达式2
规则
1.如果条件表达式为true，运算后的结果是表达式1
2.如果条件表达式为false，运算后的结果是表达式2；
口诀：【一灯大师： 一真大师】


int a = 10;
     int b = 99; //解读 1. a>b 为 false
                   //2. 返回 b--，先返回 b 的值， 然后 b-1
                   //3. 返回的结果是99
     int result = a > b ? a++ : b--;//不是98 而是99
     System.out.println(reslut)  a = 99 b = 98
result = 99   、
int  a = 3, b = 4;
int c = a > b ? a ; b + 3(可以的，满足 int -》 double)

三元运算符可以转成 if--else语句



运算优先级：
上一行运算优先于下一行。
只有单目运算符，赋值运算符是从右向左运算的。

       最高No.1:
  . () {}  ;   ,
2单目运算符
R--->L ++  --  ~  !(data type)
3算术运算符
L---->R *  /  % 
L---->R +  /  %
L- --->R +  -
4.位移运算符
L----->R <<  >>  >>> 位移
5.比较运算符
L------>R<  >   <=   >=  instanceof
L ----->R ==  !=
6逻辑运算符  
L----->R &
L------>R^
L----->|
L----->&&
L----->||
7三元运算符
L----->?   :
8赋值运算符
R------>L  =    *=     /=      %=
                 +=   -=    <<=   >>=
                 >>>=   &=   ^=    |=

标识符的命名规则和规范

标识符： java中各种变量，int（max）= 55
方法和类等命名时使用的字符序列称为标识符
凡是自己可以起名字的地方都叫标识符 

标识符的命名规则：
1.由26个英文字母大小写，0-9（不包含-）， _或$ 组成
2.数字不可以开头。 int 3ab = 1； //出错误
3.不可以使用关键字（像public）和保留字，但能包含关键字和保留字。不能int class 但是
可以以 int abcclass = 10包含方式写。
4.java中严格区分大小写，长度无限制。int totalNum = 10； int n = 90；
5.标识符不能包含空格。 int a b = 90

标识符命名的规范
1.包名：多单词组成时所有字母都小写: aaa.bbb.ccc//比如 com.hsp.crm
2.类名，接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz 比如： TankShotGame [大驼峰]
3.变量名，方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz【小驼峰，简称驼峰法】
4.常量名：所有字母都大写。 多单词时每个单词用下划线链接：XXX_YYY_ZZZ example： 定义一个所得税率 TAX_RATE
5.后面我们学习到 类，包，接口，等时，我们的命名规范要这样遵守，跟家详细的看文档
关键字：都为小写
用于定义数据类型的关键字：
class   interface     enum    byte   short    int
  long   float    double   char    boolean    void    
用于定义数据类型值的关键字：
true  false   null
用于定义流程控制的关键字：
if   else   switch   case   default    while   do  for   break   continue    return
用于定义访问权限修饰符的关键字：
private   protected   public
用于定义类，函数， 变量修饰符的关键字
abstract   final     static    synchronzed
定义类与类之间关系的关键字：
extends    implements
定义建立实例及引用实例，判断实例的关键字：
new   this     super     instanceof   
用于异常处理的关键字
try    catch   finally     throw     throws   
  用于包的关键字
package    import  
其他修饰符关键字
native   strictfp  transient   volatile    assert

保留字：
现有java版本尚未使用，以后版本可能会作为关键字使用。 自己命名时药注意
键盘输入语句：
在编程中， 需要接受用户输入的数据，就可以使用键盘输入语句来获取。
imput.java，需要一个扫描器（对象），就是Scanner
步骤：
1.导入该类的所在包，java，util.*
2.创建该类对象（声明变量）
3.调佣里面的功能

案例;
要求：可以从控制台接受用户信息，【姓名，年龄，薪水】。
Scanner 用法
import java.util.Scanner;//表示把java.utill下的Scanner类导入
public class Input{
	//main
	public static void main(String[] args) {
		//演示接受用户的输入
		//步骤
		//Scanner类 表示 简单文本扫描器， 在java。utill 包
		//1.引入/导入 Scanner 类所在的包
		//2.创建Scanner 对象， new创建一个对象，体会
		Scanner scanner = new Scanner(System.in);
		//3.接收用的输入了
		System.out.println("请输入名字");

		//当程序执行到 next 方法时，会等待用户输入，~~~~
		String name = scanner.next(); //接收用户输入
		System.out.println("请输入年龄");
		int age = scanner.nextInt(); //接收用户int
        System.out.println("请输入薪水");
		double sal = scanner.nextDouble(); //接收用户double
		System.out.println("人的信息如下:");
		System.out.println("名字=" + name + "年龄" +
		"年龄=" + age + "薪水=" + sal);
		
        
	}
}
BIN：binary 二进制
OCT：octal八进制
HEX：hexadecimal 十六进制
DEC：decimal 十进制
第一组：
1.二进制转十进制：
从最低位（右边）开始， 将每个位上的数提取出来，乘以2的（位数-1）次方，然后求和
\\0b1011 = 1*2的（1-1）次方 + 1* 2的（2-1）次方 +  0*2的（3-1）次方 + 1*2的（4-1）次方=11
2.八进制转十进制：
 .............乘以8的（位数-1）次方
0234 = 4*8的(1-1)次方+3*8的（2-1）次方+ 2*8的（3-1）次方+ 0*8的（4-1）次方= 4+ 24+ 128 + 0=156
3.十六进制转十进制：
........乘以16的（位数-1）次方
（16进制用0x开头）0x23A=570
  
第二组
1.十进制转二进制：
将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制
34 =(8位字节0b开头)0B0010 0010   34/2=17...0 17/2=8...1    8/2=4....0  4/2=2...0 2/2=1 .. 0     1开头 // 100010
2.十进制转八进制：
....除以8直到商为0     每步得到的余数倒过来
131=(前面加0)0203
3.十进制转十六进制
除以16 
237
第三组
1.二进制转八进制:
从低位开始，将二进制数每三位一组，转成对应的八进制数即可
0b11（010）（101）=325
2.二进制转十六进制
...将二进制数每四位数一组
0b（1101）0101= 0xD5
第四组
八进制转二进制
2.十六进制转二进制
将十六进制数每一位，转成对应的4位的一个二进制数即可
0x2（0010）3（0011）B（B是11所以15-11 =4   1111显示15减去4（100）变1011=0b001000111011
01(0001)2(0010)3(0011)=0b000100100011
0xA(1010)B(1011)2(0010)9(1011)=0b1010101100101011




位运算
int a = 1>>2;向右位移
int b = -1>>2;
int c = 1<<2;
int d = -1<<2;
~2 = ? //按位取反
2&3=？//2按位与3
2|3=?
~-5=?
13&7=?
5|4=?
-3^3=?//^按位异或



二进制在运算中的说明
1.二进制是逢2进位的进位制，0，1的基本算符。
2.现代的电子计算机技术全部采用的是二进制，因为它只使用0，1两个数字符号，简单，数字1在不同的位上代表不同的值，按从右至左的次序，这个值以二倍递增。

原码Sign-Magnitude，反码Ones' Complement，补码Two's complement（重点）
1.二进制的最高位是符号位：0表示正数，1表示负数（口诀：0->0 1->-）
2.正数的原码，反码，补码都一样（三码合一）
3.负数的反码=它的原码符号位不变，其他位取反（0->1,1->0）
4.负数的补码=它的反码+1，负数的反码=负数的补码-1
5.0的反码，补码都是0
6.java没有无符号数，换言之，java中的数都是有符号的
7.在计算机运算的时候， 都是以补码的方式来运算的
8.当我们看运算结果的时候，要看他的原码。



位运算符
java中有7个位运算（&、|、……、>>、<<和>>>)
）按位取反~
规则：
按位与&：两位全为1，结果为1，否则为0
按位或|：两位有一个为1，结果为1，否则为0
按位异或^:两位有一个为0，一个为1，结果为1，否则为0
按位取反~：0->1, 1->0
比如： 2&3=2  ~2=？ 2|3=？  2^3=?
2：000000010
3：000000011
答案：00000010

~-2：
-2的原码： （1）符号位0000000 00000000 00000000 00000010
-2的反码：（1）1111111 11111111 11111111 11111101
反码+1=补码
-2的补码：11111111 11111111 11111111 11111110
~-2取操作：00000000 00000000 00000000 00000001   这是运算后的补码
运算后的原码就是补码

~2：
2的补码=原码：00000000 00000000 00000000 00000010
~2取反结果为负数补码：11111111 11111111 11111111 111111101
运算后的反码：11111111 11111111 11111111 111111100
运算后的原码：100000000 00000000 00000000 00000011 ->-3 



2|3=？  
2：00000010
3：00000011
2|3：000000011=3



2^3=?
2：00000010
3：00000011
2^3:00000001
右边是高位左边是低位
>>算数右移：低位溢出，符号位不变，并用符号位补溢出的高位
<<算数左移：符号位不变，低位补0
>>>无符号右移：低位溢出，高位补0
1>>2向右移动两位
00000000 00000000 00000000 00000001
1>>2:本质是 1/2/2=0
1<<2:本质是1*2*2  =4
1<<n :本质是1*2^n
a%b 当a时小数时，公式=a-(int)a/b*b
i=63
print(++i+i)  ,     i=i+1      结果67+67

控制结构

顺序结构：
分之控制：（if，else，swich）
循环控制：（for, while, dowhile, 多重循环）
break
continue
return
程序流程控制介绍
在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句。
1 )顺序控制
顺序控制介绍
程序从上到下逐行地执行，中间没有任何判断和跳转
顺序控制举例和注意事项
java中定义成员变量时采用合法的前向引用。如：
public class Test{
     int num1 = 12;
    int num2 = num1 + 2;
}
错误形式：
public class Test{
     int num2 = num1 + 2; //错误
      int num1 = 12;
}



2）分之控制  (if - else)
分之控制if-else介绍
让程序有选择的执行，分之控制有三种
单分支
基本语法
if（条件表达式）{
          执行代码块；（可以有多条语句。）
   }
说明：当条件表达式为true时，就会执行{}的代码。如果为false，就不执行，
特别说明，如果{}中只有一条语句， 则可以不用{}， 建议写上{}

案例：
编写一个程序，可以输入人的年龄，如果该同志的年龄大于18岁，则输出“你年龄大于18，要对自己的行为负责，送入监狱”
双分支
多分支

if(age >18){
      system.out.println("你年龄大于18，要对自己的行为负责，送入监狱"）

 } 
else{ //else必须在下面
system.out.println("你的年龄不大这次放过你了")   //双分支}




3）循环控制
 if(条件表达式1）{
 执行代码块1；
}
else if （条件表达式2）
   执行代码块2；
}
......
else{
   执行代码块n;
}
多分支的流程图（重要）
说明
1.当条件表达式1成立时，即执行代码块1
2.如果表达式1不成立，才去判断表达式2是否成立。
3.如果表达式2成立，就执行代码块2
4.以此类推，如果所有的表达式都不成立
5.则执行else的代码块，注意，只能有一个执行入口。
特别说明：（1）多分支 可以没有else， 如果所有的条件表达式都不成立，则一个执行入口都没有（2）如果有else， 如果所有的条件表达式都不成立，则默认执行else代码块 



if（）{
   if（）{
   }   
 }//最多嵌套三层，可读性好。
import java.util.Scanner;
public class If05
{

	//写main
	//1.创建Scanner 对象，接收
	//2.接收一个成绩保存到 double score
	//3.使用 if-else 判断
	//4.如果进入到 决赛，再接收 char gender， 使用 if-else
	public static void main(String[] args) 
	{
			
			Scanner scanner = new Scanner(System.in);	
			System.out.println("输入性别：");
			char gender = scanner.next().charAt(0);
			System.out.println("输入成绩：");
		    double score = scanner.nextDouble();

			if (gender == '男')
			{
				if(score > 8.0){
		            System.out.println("进入男决赛");

				}else{System.out.println("淘汰");}

				
			}else if(gender == '女'){
				if(score > 8.0){
				System.out.println("进入女决赛");

			    }else {System.out.println("淘汰");}
			
			
			
			}else 
			{
				System.out.println("您的性别有误不能参加比赛");
			}
    }
}
.char At(0) string 转char
嵌套分支:


switch分支结构
基本语法
switch（表达式）{
     case常量1：//当.... 
     语句块1；
     break；
     语句块2；
     break；
     .....
     case 常量n；
     语句块n；
     break；
     default;
     default语句块；
     break；
1.switch 关键字， 表示switch分支
2.表达式 对应一个值
3.case常量1：当表达式的值等于常量1，就执行 语句块1
4.如果和case 常量1 匹配， 就执行语句块1，如果没有匹配，就继续匹配case常量2
6.如果一个都没有匹配上，执行default
    case 穿透现象：假如不写break 语句块1执行后会继续执行语句块2.  
如果所有break都没写那么会执行所有语句块+default。

import java.util.Scanner;
public class switch01{
	public static void main(String[] args) {
	//改程序可以接收一个字符，比如：abcdefg
		//a表示星期1，b表示星期二
		//根据用户的
	Scanner myScanner = new Scanner(System.in);
	System.out.println("请输入一个字符（a-b）");
	char c1 = myScanner.next().charAt(0);//
	    switch(c1){
		case 'a':
		      System.out.println("今天星期一，猴子穿新衣");
		      break;
		case 'b':
		      System.out.println("今天星期二，猴子穿新");
		      break;
		case 'c':
		      System.out.println("今天星期三，猴子穿");
		      break;
		default:
		        System.out.println("您输入错误");


		            

	    }
	    System.out.println("错误");

	}
}
1.表达式数据类型，应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是int
2.switch表达式的类型包括：（byte,short,int,char,enum【枚举】，String）
3.case子句中的值必须是常量，而不能是变量
4.default字句是可选的，当没有匹配的case时，执行default
没有default时无输出
5.break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有写break，程序会顺序执行到switch结尾。

switch和if比较：如果判断的具体数值不多，而且符合byte、short、int、char、enum、String这6种类型。虽然两个语句都可以使用，建议使用switch语句。
其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广

for循环控制
打印10句“你好，韩顺平教育”
for基本语法
for (循环变量初始化；循环条件；循环变量迭代){
循环操作（可以多条语句）；
}
1.for关键字，表示循环控制
2.for有四要素：（1）循环变量初始化（2）循环条件（3）循环变量迭代
3.循环操作。这里可以有多条语句，也就是我们要循环执行的代码
4.如果 循环操作（语句）只有一条语句，可以省略{}，建议不要省略
for：
细节：
1.循环条件是返回一个布尔值的表达式 真或假
2.for（；循环判断条件）中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略。
3.循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。
4.使用内存分析法，老师分析输出下面代码



//打印1-100之间所有是9的倍数的整数，统计个数 及总和


class If10{
	  public static void main(String[] args) {
	  	


	  	//打印1-100之间所有是9的倍数的整数，统计个数 及总和
	  	//
	  	int count =0;
	  	int sum =0;
	  	for(int a = 1; a <= 100;  a++){
                                               中间不能用逗号隔开   
          if(a%9 == 0){   

          	count++;  sum += a;
          System.out.println("a=" + a);
	  		}
	  		}
	  		System.out.println("sum="+ sum+"count="+ count);

}
}

 
class for1{
	public static void main(String[] args) {
		//化繁为简，先死后活
		//先输出0-5
         
        
		for(int a = 0, b =5 -a ; a<= 5;a++,b--){
          
            System.out.println(a + "+" + b+"="+ "5");
           




		}
	}


   
}0+5=5
1+4=5
2+3=5
3+2=5
4+1=5
5+0=5


class for1{
	public static void main(String[] args) {
		//化繁为简，先死后活
		//先输出0-5
         int n = 10;
        
		for(int a = 0; a<=n ;a++){
          
            System.out.println(a + "+" + (n-a)+"="+ n);
           




		}
	}


   
}0+10=10
1+9=10
2+8=10
3+7=10
4+6=10
5+5=10
6+4=10
7+3=10
8+2=10
9+1=10
10+0=10


while循环 
循环变量初始化；
while（循环条件）{

      循环体（语句）；
      循环变量迭代；
   说明
1）while 循环也有四要素
2）只是四要素放的位置，不一样。

class while1{
	public static void main(String[] args) {
		
		//输出10句韩顺平教育


		int i = 1;//循环变量初始化
		while( i <= 10) {//循环条件
			System.out.println("你好，韩顺平" + i);
			i++;//循环变量迭代
		}System.out.println("over");//最后i变11for则变10
	}
}



class while2{
           public static void main(String[] args) {
           	
           
    //打印1-100之间所有能被3整除的数
    //打印40-200之间的所有的偶数
    int a =1;

	while(a <=100){
     if(a%3 == 0){
       	System.out.println(a);
       }
		 a++; 
		

}
	}
}
do while循环控制
基本语法
do{
          循环体（造句）；
          循环变量迭代；   
  }while(循环条件)；
1.do while 是关键字
1.也有循环四要素，只是位置不一样
2.先执行，再判断，也就是说，一定会执行一次
3.最后有一个分号；
4.while和do..while 区别举例：要账
class dowhile2{


	public static void main(String[] args) {
		//1使用do-while输出1-200
		//2过滤能被5整除但不能被3整除的数%
		//3统计满足条件的个数 int count= 0




		int i =1; int count = 1; 
		do{
			if(i % 5 == 0 && i % 3 != 0){
                    
			      System.out.println(i+" "+ count);
			       count++;
			      }
			
			i++; 
			
			
				}while(i <= 200);	      
                System.out.println(count);
	} 
	 
}ctrl+ c 离开循环

do while 循环里面不能定义变量但是for可以

import java.util.Scanner;
class dowhile4{

 //如果李三不还钱，则老韩将一直使出五连鞭，知道李三说还钱为止
	//化繁为简
	//不停地问还钱吗？
	//问还钱吗？
	//使用char answer
	public static void main(String[] args) {
		Scanner myScanner = new Scanner(System.in);
		
        char answer = ' ';
		do {  
		      
						System.out.println("老韩问还钱吗？yes1 or no2");
					    answer = myScanner.next().charAt(0);
					    System.out.println("他的回答是" + answer);
                 for(int i = 1; i<=5; i++){    
			                 	
							    if(answer != 'y'){
								System.out.println("鞭");
							     }
							     }     
			     
		
		        }while(answer != 'y');
		       
        




	}
}


多重循环控制
1.将一个寻欢放在另一个循环体内，就形成了嵌套循环。 其中，for，while，do.....while均可以作为外层循环和内城循环。【建议一般使用两层，自多不要超过3层，否则，代码的可读性很差】
2.实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环
3.设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次。
for循环2次{
for循环3次{
}}   = 2*3=6

import java.util.Scanner;
class MulFor{


	public static void main(String[] args) {
		
		//统计3个班成绩情况，每个班有5名同学，求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入]
        //化繁为简
        //1,先计算一个班，5个学生的成绩使用for
        //2.穿件Scanner
        //3.得到该班级的平均分，定义一个double1 sum 把该班级5个学生的成绩累及
        //4.所有班级的平均分
        //5.定义一个变量， doubletotalScore 累及所有学生的成绩
        //统计三个班级及格人数；
        //定义变量 int passNum = 0; 当有一个学生成绩>=60, passNum++
        Scanner myscanner = new Scanner(System.in);

        double sum = 0;//一个班级的总分

              double totalscore = 0;
              int passNum =0;       
             for(int i = 1; i <= 3; i++){



                     for( int j = 1; j <= 5; j++){
                     	System.out.println("请数第"+i+"个班的第"+j+"个学生的成绩");
                        
                    double score = myscanner.nextDouble();
                    if(score >= 60){
                         passNum++;
                    }
                    sum += score;
                    System.out.println("成绩为"+ score);
                   
                     }
                    
                  // 因为sum是5个学生的总成绩
                     System.out.println("sum=" + sum + "平均分" + (sum/5));
          //sum累及到total
          totalscore += sum;

        
           


         }
         System.out.println("total=" + totalscore + "totalscore=" + totalscore/(3*5) );
              
	}
}

多重循环控制
打印金字塔
使用for循环完成
编写一个程序，可以接收一个整数，表示层数，打印金字塔

    *
   ***
  *****
 *******
*********
public static void main(String[] args) {

 					  
                for(int i =1; i <= 5; i++){//i表示层数
                	//控制打印每层的*的个数对应空格= 总层数 - 当前层
                	for(int k =1; k <=5-i;k++){
                        //在输出*之前，还有输出
                		System.out.print(" ");
                	}
                	for(int j =1; j<=2*i-1; j++){
                	System.out.print("*");	
                



                System.out.print("\n");}	
                                            //没打完一层的*后换行
					               	
				           }
                         

					}	
								

            *
        *      *
       *        *
      *           *
     *             *
    *                *
   *                  *
  *                     *
 *                       *
*******************

public static void main(String[] args) {

 				int totallevel1 = 10;	  
                for(int i =1; i <= totallevel1; i++){//i表示层数
                	//控制打印每层的*的个数对应空格= 总层数 - 当前层
                	for(int k =1; k <=totallevel1-i;k++){
                        //在输出*之前，还有输出
                		System.out.print(" ");
                	}
                	for(int j =1; j<=2*i-1; j++)
                	//当前行的第一个位置是*，最后一个位置也是*,最后一层全部*3
                		if(j ==1 || j ==2*i -1 || i == totallevel1){
                	System.out.print("*");
            }else{  System.out.print(" ");        }
                System.out.print("\n");		
                
//先死后活


                }//没打完一层的*后换行
					               	
				          }
                         

					}	
								
	
*********      
*********
*********
*********
*********
*********
*********
*********
*********
for(int i = 1;i <= 9;i++ ){//i表示每一层的*数
        
         
          for(int j=1; j <= 9; j++){
         
          System.out.print("*");

           } System.out.println(" ");   
     }

*
***
*****
*******
*********
***********
*************
***************
*****************


for(int i = 1;i <= 9;i++ ){//i表示每一层的*数
        
         
          for(int j=1; j <= 2*i-1; j++){
         
          System.out.print("*");

           } System.out.println(" ");   
     }
    *
   ***
  *****
 *******
*********
 *******
  ******
    ***
      *
   class MulFor3{
      public static void main(String[] args) { //main     
           for(int i = 1;i <= 9;i++ ){
        
         
                for(int a =1; a <= 9-i; a++){

            	System.out.print(" ");
                }
           
            	
            	
                for(int d = 1;d<= 2*(i-5)&& i>=6; d++){
                 System.out.print(" ");
                }

                  if(i<=5){

                  for(int j=1; j <= 2*i-1; j++){
                 
                  System.out.print("*");
                  }
                                   	
                  }else{
                       for(int f=1; f<= 7-2*(i-6); f++){
                  	   System.out.print("*");
                       }


                       }
                       System.out.println(" ");
            }




               
         }
}
  
        *
       * *
      *   *
     *     *
    *       *
     *     *
      *   *
       * *
        *


class MulFor3{
      public static void main(String[] args) { //main     
           for(int i = 1;i <= 9;i++ ){
        
         
                for(int a =1; a <= 9-i; a++){

            	System.out.print(" ");
                }
           
            	
            	
                for(int d = 1;d<= 2*(i-5)&& i>=6; d++){
                 System.out.print(" ");
                }

                  if(i<=5){

                  for(int j=1; j <= 2*i-1; j++){
                      if(j == 1||j==2*i-1||i==6){

                      System.out.print("*");
                      }else{ System.out.print(" ");} 
                 
                      
                  }
                                   	
                  }else{
                       for(int f=1; f<= 7-2*(i-6); f++){
                             if(f==1|| f==7-2*(i-6)){
                                 System.out.print("*");
                             }else{System.out.print(" ");}
                  	  
                       }


                       }
                       System.out.println(" ");
            }




               
         }
}


1*1=1
1*2=2  2*2=4
1*3=3  2*3=6  3*3=9
1*4=4  2*4=8  3*4=12  4*4=16
1*5=5  2*5=10  3*5=15  4*5=20  5*5=25
1*6=6  2*6=12  3*6=18  4*6=24  5*6=30  6*6=36
1*7=7  2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=49
1*8=8  2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=64
1*9=9  2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81

class MulFor4{


	public static void main(String[] args) {
		

		for(int i = 1;i <= 9; i++){//i指的是层数
			    
                       for(int j = 1; j <= i; j++){//j指的是每一层的存在的


            			System.out.print(j+"*" + i + "="+ i*j+ "  ");
            }
            System.out.println(" ");
		}
	}
}
随机生成1-100的一个数，直到生成了97这个数，看看你一共用了几次？
提示Math.random.java

跳转控制语句-break
循环，但是循环的次数不知道-》break，当某个条件满足时，终止循环通过该需求可以说明其他流程控制的必要性，比如break

break语句用于终止某个语句块的而执行，一般使用在switch或者循环【for，while，dowhile】

......{break;}
。。。。跳出循环
注意事项和细节说明：
1.break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块
2.标签的基本使用
label1：{.......
label2:             {    ............
label3:                           {...........
                                         break label2;

                                             }
}
}
l老韩解读
1）break语句可以指定退出那层
2）label1是标签，名字由程序员指定
3）break 后指定到哪个label就退出到哪里
4）在实际的开发中，老韩尽量不要使用标签
5）如果没有指定break，默认退出最近的循环体






break结束那层的循环
abc1:  
              for(int j = 0; j < 4; j++){//外层循环
                  abc2:	
                  for(int i = 0; i<10 ; i++){//内层循环}
                  	 if(i==2){
                  		   break abc2;//跳出离他最近的
                  	 }
                  	   
                     } System.out.println("i" + i);
              }
          }  //内部运算：j=0     1     2      3
                                 i=012,012,012,012
      }//输出i=0,1,0,1,0,1,0,1 j=1,2,3
for定义首先从外层进入内层，内层一直循环到跳出或break，break从新循环那层的外循环。



//1-100以内的数求和，求出 当合 第一次大于20的当前述（for+break）	
	
		



    int i = 1;
    int sum = 0;
		for(; i <= 100; i++){
			sum += i;
			if(sum > 20){
				break;

			}
		}System.out.println("i="+ i + "sum=" + sum);


/实现登入验证，有3次机会，如果用户名为“丁真”，密码“666”提示 登录成功，
		//否则提示还有几次机会，请使用for+break完成


        Scanner myScanner = new Scanner(System.in);
        String name = "";
        String passwd = "";
        int chance = 3;
        for( int i = 1; i <= 3; i++){//3次登入机会
        	System.out.println("请输入名字");
        	name  = myScanner.next();
        	System.out.println("请输入密码");
        	passwd = myScanner.next();

        if("丁真".equals(name)&&"666".equals(passwd)){//name = 丁真 passwd = 666
        	System.out.println("恭喜你，登录成功");
        	break;
        }
        chance--;
        System.out.println("你还有" +chance+ "次登陆机会")
       }
	}
}

//思路：1.创建Scannner对象接收用户输入
//2.定义String name； String passwd；保存用户名和密码
//3.最多循环3次【登入3次】，如果满足条件就提前退出
//4.定义一般变量 int chance 记录还有几次登录机会
//代码实现




跳转控制语句-continue
1）continue语句用于结束本次循环，继续执行下一次循环。
2）continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和前面的标签的使用的规则一样。
基本语法：
{   ..
    continue
.....
}
以while使用continue为例，画出示意图
public static void main(String[] args) {
		
		int i = 1;
		while( i <=  4){
			i++;
			if( i == 2){
				 continue;

			}System.out.println("i=" + i);
		}
	}i= 3.4.5
continue细节：回到循环初始位置。
break：终止当前循环
跳转控制语句。
return

return使用在方法，表示跳出所在的方法，在讲解方法的时候，会详细的介绍，这里我们简单的提一下。注意：如果return写在main方法，退出程序。

三种 break continue return比较：


class return{
	public static void main(String[] args) {
		
		for(int i =1;i<=5;i++){
			if(i==3){
				System.out.println("韩孙平" +i);

				break;
			}
		}   System.out.println("hello world");
		System.out.println("go on..");
	}
}//hello hello 韩孙平3， go on ..
class return{
	public static void main(String[] args) {
		
		for(int i =1;i<=5;i++){
			if(i==3){
				System.out.println("韩孙平" +i);

				continue;
			}
		}   System.out.println("hello world");
		System.out.println("go on..");
	}
}//hello hello 韩孙平3，hello hello go on ..
class return{
	public static void main(String[] args) {
		
		for(int i =1;i<=5;i++){
			if(i==3){
				System.out.println("韩孙平" +i);

				return;//表示跳出方法，如果使用在main，时表示
			}
		}   System.out.println("hello world");
		System.out.println("go on..");
	}
}//hello hello 韩孙平3，


class lianxi{
public static void main(String[] args) {
	

//某人有100,000元，每经过一次入口，需要交费，规则如下：
	//当现金 >500000时，每次交5%
	//当现金 <=500000时，每次交1000
	//编程计算该人可以经过多少次路口，要求：使用while + break方式完成
	//思路分析
	//1.定义 double money 保存 100000
	//2.根据题的要求，我们分析出来有三种情况
	          /*
	          money > 50000
              money >= 1000 && money <= 50000
              money < 1000
      3.使用多分支 if -elseif-else
      4.while + break【money 《 1000】， 同时使用一个变量count来保存通过路口
      代码实现
      */
      double money = 100000;
      while(ture){//无限循环
      	if(money> 50000){
      		money *= 0.95; 
      	}else if(money >=10000 && money <= 500000){
      		money -= 1000;
      		count++;

      	}else{//钱不够1000
      	    break; }
      }
      System.out.println(count);







class lianxi6{

	public static void main(String[] args) {
		

              /*
              输出1-100之间的不能被5整除的数，每5个一行
              思路：
              1.先输出1-100的所有数
              2.然后过滤输出不能被5整除的数
              3.每5个一行， 我们是用int count 统计输出的个数 count%5=0就说明
                  输出了5个， 这时，我们输出 一个换行即可控制
              */





	       int count =0;
		
		
             for(int j =1; j <= 100  ; j++){
                             if(j % 5 != 0 ){
                             	  count++;
                       	   	 System.out.print(j+" \t");
                                
                               //每满5个，就输出一个    
                            

                                

                                
                            
                          
             	   	   
             	   
             	   if(count % 5 ==0){
             	   	System.out.println(" ");
             	   }
             	  }
             	  } 
             	 
                                   
                                 }                          	
                             }

   lass lianxi7{
	public static void main(String[] args) {
		

	/*
	思路：1.定义  String a-z
	       2.输出 小写的 a-z
	       3.输出 大写的 Z-A
	       考察我们对 a-z编码和for的
	        综合使用实际上char 字符中的字母abcd可以当1234使用的，
	        只不过 char a 对应97   char  b对应 98


	       */
	      
            for(char c1 = 'a' ; c1<= 'z'; c1++){
            	
            	System.out.print( c1 + " ");
            } 

	      

	}
}          






	/*
	思路：1.定义  String a-z
	       2.输出 小写的 a-z
	       3.输出 大写的 Z-A
	       考察我们对 a-z编码和for的
	        综合使用实际上char 字符中的字母abcd可以当1234使用的，
	        只不过 char a 对应97   char  b对应 98


	       */
	      
            for(char c1 = 'a' ; c1<= 'z'; c1++){
            	
            	System.out.print( c1 + " ");
            } 
             System.out.print("===========");
	      for(char c1 = 'Z' ; c1>= 'A'; c1--){
            	
            	System.out.print( c1 + " ");
            } 
  


class lianxi8{
	public static void main(String[] args) {
		/*
		求出1-1/2+1/3-1/4..1/100的 和
		思路分析
		1. （1/1）-（1/2）+（1/3）-（1/4）....1/100
		2. 从上面的分析我们可以看到
		（1）一共有100数，分子为1，分母从1-100
		    当分母为奇数时，前面时+，当分母是偶数时，前面是-
		    3.加上for 完成
		    */


		double n= 1;
		double  sum = 0;
		

    
		
		for(;n <= 100; n++){
			if(n%2 ==0){

				sum -= 1.0/n;

			}else if(n % 2 != 0){
				sum += 1.0/n;//sum能叠加进去 两个sum都会得到计算最终变成同一个sum。
				       //1.0和 n 必须都是double
				
			}
      		
	              
	     

		
	} System.out.println(sum );


}
}


